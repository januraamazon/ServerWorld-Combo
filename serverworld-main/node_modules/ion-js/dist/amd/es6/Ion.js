/*!
 * Copyright 2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
define(["require", "exports", "./IonBinaryReader", "./IonConstants", "./IonSpan", "./IonTextReader", "./IonTextWriter", "./IonPrettyTextWriter", "./IonWriteable", "./IonBinaryWriter", "./IonLocalSymbolTable", "./IonUnicode", "./IntSize", "./IonCatalog", "./IonDecimal", "./IonLocalSymbolTable", "./IonType", "./IonTypes", "./IonSharedSymbolTable", "./IonTimestamp", "./IonText", "./IonUnicode", "./dom", "./dom"], function (require, exports, IonBinaryReader_1, IonConstants_1, IonSpan_1, IonTextReader_1, IonTextWriter_1, IonPrettyTextWriter_1, IonWriteable_1, IonBinaryWriter_1, IonLocalSymbolTable_1, IonUnicode_1, IntSize_1, IonCatalog_1, IonDecimal_1, IonLocalSymbolTable_2, IonType_1, IonTypes_1, IonSharedSymbolTable_1, IonTimestamp_1, IonText_1, IonUnicode_2, dom, dom_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    IntSize_1 = __importDefault(IntSize_1);
    dom = __importStar(dom);
    exports.IntSize = IntSize_1.default;
    function isBinary(buffer) {
        if (buffer.length < 4) {
            return false;
        }
        for (let i = 0; i < 4; i++) {
            if (buffer[i] !== IonConstants_1.IVM.binary[i])
                return false;
        }
        return true;
    }
    function makeReader(buf) {
        if ((typeof buf) === "string") {
            return new IonTextReader_1.TextReader(new IonSpan_1.StringSpan(buf));
        }
        const bufArray = new Uint8Array(buf);
        if (isBinary(bufArray)) {
            return new IonBinaryReader_1.BinaryReader(new IonSpan_1.BinarySpan(bufArray));
        }
        else {
            return new IonTextReader_1.TextReader(new IonSpan_1.StringSpan(IonUnicode_1.decodeUtf8(bufArray)));
        }
    }
    exports.makeReader = makeReader;
    function makeTextWriter() {
        return new IonTextWriter_1.TextWriter(new IonWriteable_1.Writeable());
    }
    exports.makeTextWriter = makeTextWriter;
    function makePrettyWriter(indentSize) {
        return new IonPrettyTextWriter_1.PrettyTextWriter(new IonWriteable_1.Writeable(), indentSize);
    }
    exports.makePrettyWriter = makePrettyWriter;
    function makeBinaryWriter() {
        const localSymbolTable = IonLocalSymbolTable_1.defaultLocalSymbolTable();
        return new IonBinaryWriter_1.BinaryWriter(localSymbolTable, new IonWriteable_1.Writeable());
    }
    exports.makeBinaryWriter = makeBinaryWriter;
    function _writeAllTo(writer, values) {
        for (let value of values) {
            dom.Value.from(value).writeTo(writer);
        }
        writer.close();
        return writer.getBytes();
    }
    function dumpBinary(...values) {
        return _writeAllTo(makeBinaryWriter(), values);
    }
    exports.dumpBinary = dumpBinary;
    function dumpText(...values) {
        return IonUnicode_1.decodeUtf8(_writeAllTo(makeTextWriter(), values));
    }
    exports.dumpText = dumpText;
    function dumpPrettyText(...values) {
        return IonUnicode_1.decodeUtf8(_writeAllTo(makePrettyWriter(), values));
    }
    exports.dumpPrettyText = dumpPrettyText;
    exports.Catalog = IonCatalog_1.Catalog;
    exports.Decimal = IonDecimal_1.Decimal;
    exports.defaultLocalSymbolTable = IonLocalSymbolTable_2.defaultLocalSymbolTable;
    exports.IonType = IonType_1.IonType;
    exports.IonTypes = IonTypes_1.IonTypes;
    exports.SharedSymbolTable = IonSharedSymbolTable_1.SharedSymbolTable;
    exports.TimestampPrecision = IonTimestamp_1.TimestampPrecision;
    exports.Timestamp = IonTimestamp_1.Timestamp;
    exports.toBase64 = IonText_1.toBase64;
    exports.decodeUtf8 = IonUnicode_2.decodeUtf8;
    exports.dom = dom;
    exports.load = dom_1.load;
    exports.loadAll = dom_1.loadAll;
});
//# sourceMappingURL=Ion.js.map