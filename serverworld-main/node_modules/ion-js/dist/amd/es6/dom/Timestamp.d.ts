import { Value } from "./Value";
import * as ion from "../Ion";
import { Writer } from "../Ion";
declare const Timestamp_base: {
    new (...args: any[]): {
        _ionType: ion.IonType;
        _ionAnnotations: string[];
        _unsupportedOperation<T extends Value>(functionName: string): never;
        getType(): ion.IonType;
        _setAnnotations(annotations: string[]): void;
        getAnnotations(): string[];
        isNull(): boolean;
        booleanValue(): boolean | null;
        numberValue(): number | null;
        bigIntValue(): import("jsbi").default | null;
        decimalValue(): ion.Decimal | null;
        stringValue(): string | null;
        dateValue(): Date | null;
        timestampValue(): ion.Timestamp | null;
        uInt8ArrayValue(): Uint8Array | null;
        fieldNames(): string[];
        fields(): [string, Value][];
        elements(): Value[];
        get(...pathElements: (string | number)[]): Value | null;
        as<T_1 extends Value>(ionValueType: import("./Value").Constructor<T_1>): T_1;
        writeTo(writer: ion.Writer): void;
    };
    _getIonType(): ion.IonType;
    _fromJsValue(jsValue: any, annotations: string[]): Value;
} & DateConstructor;
export declare class Timestamp extends Timestamp_base {
    protected _timestamp: ion.Timestamp;
    protected _date: Date;
    constructor(dateOrTimestamp: Date | ion.Timestamp, annotations?: string[]);
    private static _timestampFromDate;
    timestampValue(): ion.Timestamp;
    dateValue(): Date;
    writeTo(writer: Writer): void;
}
export {};
