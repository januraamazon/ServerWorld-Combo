"use strict";
/*!
 * Copyright 2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const IonBinaryReader_1 = require("./IonBinaryReader");
const IonConstants_1 = require("./IonConstants");
const IonSpan_1 = require("./IonSpan");
const IonTextReader_1 = require("./IonTextReader");
const IonTextWriter_1 = require("./IonTextWriter");
const IonPrettyTextWriter_1 = require("./IonPrettyTextWriter");
const IonWriteable_1 = require("./IonWriteable");
const IonBinaryWriter_1 = require("./IonBinaryWriter");
const IonLocalSymbolTable_1 = require("./IonLocalSymbolTable");
const IonUnicode_1 = require("./IonUnicode");
const IntSize_1 = __importDefault(require("./IntSize"));
exports.IntSize = IntSize_1.default;
function isBinary(buffer) {
    if (buffer.length < 4) {
        return false;
    }
    for (let i = 0; i < 4; i++) {
        if (buffer[i] !== IonConstants_1.IVM.binary[i])
            return false;
    }
    return true;
}
function makeReader(buf) {
    if ((typeof buf) === "string") {
        return new IonTextReader_1.TextReader(new IonSpan_1.StringSpan(buf));
    }
    const bufArray = new Uint8Array(buf);
    if (isBinary(bufArray)) {
        return new IonBinaryReader_1.BinaryReader(new IonSpan_1.BinarySpan(bufArray));
    }
    else {
        return new IonTextReader_1.TextReader(new IonSpan_1.StringSpan(IonUnicode_1.decodeUtf8(bufArray)));
    }
}
exports.makeReader = makeReader;
function makeTextWriter() {
    return new IonTextWriter_1.TextWriter(new IonWriteable_1.Writeable());
}
exports.makeTextWriter = makeTextWriter;
function makePrettyWriter(indentSize) {
    return new IonPrettyTextWriter_1.PrettyTextWriter(new IonWriteable_1.Writeable(), indentSize);
}
exports.makePrettyWriter = makePrettyWriter;
function makeBinaryWriter() {
    const localSymbolTable = IonLocalSymbolTable_1.defaultLocalSymbolTable();
    return new IonBinaryWriter_1.BinaryWriter(localSymbolTable, new IonWriteable_1.Writeable());
}
exports.makeBinaryWriter = makeBinaryWriter;
function _writeAllTo(writer, values) {
    for (let value of values) {
        dom.Value.from(value).writeTo(writer);
    }
    writer.close();
    return writer.getBytes();
}
function dumpBinary(...values) {
    return _writeAllTo(makeBinaryWriter(), values);
}
exports.dumpBinary = dumpBinary;
function dumpText(...values) {
    return IonUnicode_1.decodeUtf8(_writeAllTo(makeTextWriter(), values));
}
exports.dumpText = dumpText;
function dumpPrettyText(...values) {
    return IonUnicode_1.decodeUtf8(_writeAllTo(makePrettyWriter(), values));
}
exports.dumpPrettyText = dumpPrettyText;
var IonCatalog_1 = require("./IonCatalog");
exports.Catalog = IonCatalog_1.Catalog;
var IonDecimal_1 = require("./IonDecimal");
exports.Decimal = IonDecimal_1.Decimal;
var IonLocalSymbolTable_2 = require("./IonLocalSymbolTable");
exports.defaultLocalSymbolTable = IonLocalSymbolTable_2.defaultLocalSymbolTable;
var IonType_1 = require("./IonType");
exports.IonType = IonType_1.IonType;
var IonTypes_1 = require("./IonTypes");
exports.IonTypes = IonTypes_1.IonTypes;
var IonSharedSymbolTable_1 = require("./IonSharedSymbolTable");
exports.SharedSymbolTable = IonSharedSymbolTable_1.SharedSymbolTable;
var IonTimestamp_1 = require("./IonTimestamp");
exports.TimestampPrecision = IonTimestamp_1.TimestampPrecision;
exports.Timestamp = IonTimestamp_1.Timestamp;
var IonText_1 = require("./IonText");
exports.toBase64 = IonText_1.toBase64;
var IonUnicode_2 = require("./IonUnicode");
exports.decodeUtf8 = IonUnicode_2.decodeUtf8;
const dom = __importStar(require("./dom"));
exports.dom = dom;
var dom_1 = require("./dom");
exports.load = dom_1.load;
exports.loadAll = dom_1.loadAll;
//# sourceMappingURL=Ion.js.map