"use strict";
/*!
 * Copyright 2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const IonSystemSymbolTable_1 = require("./IonSystemSymbolTable");
class LocalSymbolTable {
    constructor(theImport, symbols = []) {
        this.index = {};
        this._symbols = [];
        if (theImport === null) {
            this._import = IonSystemSymbolTable_1.getSystemSymbolTableImport();
        }
        else {
            this._import = theImport;
        }
        this.offset = this._import.offset + this._import.length;
        for (let symbol_ of symbols) {
            this.addSymbol(symbol_);
        }
    }
    get symbols() {
        return this._symbols;
    }
    get maxId() {
        return this.offset + this._symbols.length - 1;
    }
    get import() {
        return this._import;
    }
    getSymbolId(symbol_) {
        return this._import.getSymbolId(symbol_) || this.index[symbol_];
    }
    addSymbol(symbol_) {
        if (symbol_ !== null) {
            let existingSymbolId = this.getSymbolId(symbol_);
            if (existingSymbolId !== undefined)
                return existingSymbolId;
        }
        let symbolId = this.offset + this.symbols.length;
        this.symbols.push(symbol_);
        if (symbol_ !== null) {
            this.index[symbol_] = symbolId;
        }
        return symbolId;
    }
    getSymbolText(symbolId) {
        if (symbolId > this.maxId)
            throw new Error("SymbolID greater than maxID.");
        let importedSymbol = this.import.getSymbolText(symbolId);
        if (importedSymbol !== undefined)
            return importedSymbol;
        let index = symbolId - this.offset;
        return this.symbols[index];
    }
    numberOfSymbols() {
        return this._symbols.length;
    }
}
exports.LocalSymbolTable = LocalSymbolTable;
function defaultLocalSymbolTable() {
    return new LocalSymbolTable(IonSystemSymbolTable_1.getSystemSymbolTableImport());
}
exports.defaultLocalSymbolTable = defaultLocalSymbolTable;
//# sourceMappingURL=IonLocalSymbolTable.js.map